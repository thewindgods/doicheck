#!/usr/bin/env nu

let keyLocation   = open ~/.config/doicheck/config.json
let wosApiKey     = $keyLocation | get wosKey
let scopusApiKey  = $keyLocation | get scopusKey

def main [user_input] {
let df = [
    {
        DOI: $user_input
        ISI_FOUND: ""
        ScopusId_FOUND: ""
        PMID_FOUND: ""
        OpenAlex_OA_Type: ""
    }
]

let findingIds = $df
| each {|row|
    let doi = $row.DOI

    let isiUrl = $"https://wos-api.clarivate.com/api/wos?databaseId=WOS&usrQuery=DO=($doi)&count=1"
    print $"fetching WoS ISI for ($doi)"
    let isiFound = do -i { let result = http get --headers [ X-ApiKey $wosApiKey Accept application/json ] $isiUrl
    let recs   = ($result | get Data.Records.records?)
    if ($recs | is-empty) { "" } else {
    $recs | get REC.UID.0 | str replace "WOS:" "" }
    }

    let scUrl = $"https://api.elsevier.com/content/abstract/doi/($doi)?httpAccept=application/json&apiKey=($scopusApiKey)"
    print $"fetching ScopusId for ($doi)"
    let scFound = do -i { let result = http get $scUrl
    $result | get abstracts-retrieval-response.coredata.eid? 
    }

    let oaUrl = $"https://api.openalex.org/works?filter=doi:($doi)&per-page=1"
    print $"fetching OpenAlex and Pubmed data for ($doi)"
    let oaRaw    = http get $oaUrl
    let oaResults = ($oaRaw | get results?) 
    let pmFound = if ($oaResults | is-empty) {
      ""
    } else {
      do -i {$oaResults.0.ids.pmid? | str replace "https://pubmed.ncbi.nlm.nih.gov/" ""}
    }
    let oaTypeFound = if ($oaResults | is-empty) {
      ""
    } else {
      do -i {$oaResults.0.open_access.oa_status?}
    }
    sleep 0.5sec
    $row | merge {
      ISI_FOUND:       $isiFound,
      ScopusId_FOUND:  $scFound,
      PMID_FOUND:      $pmFound,
      OpenAlex_OA_Type: $oaTypeFound,
    }
}


$findingIds
| select DOI ISI_FOUND ScopusId_FOUND PMID_FOUND OpenAlex_OA_Type

}
